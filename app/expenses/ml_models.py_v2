import os
import joblib
import numpy as np
import pandas as pd
from collections import defaultdict
from datetime import datetime

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_DIR = os.path.join(BASE_DIR, 'models')

# Load models
logistic_model = joblib.load(os.path.join(MODEL_DIR, 'logistic_regression.pkl'))
tfidf_vectorizer = joblib.load(os.path.join(MODEL_DIR, 'tfidf_vectorizer.pkl'))
random_forest_model = joblib.load(os.path.join(MODEL_DIR, 'random_forest_regressor.pkl'))
label_encoder = joblib.load(os.path.join(MODEL_DIR, 'label_encoder.pkl'))

def predict_category(description):
    vec = tfidf_vectorizer.transform([description])
    pred_encoded = logistic_model.predict(vec)[0]
    category = label_encoder.inverse_transform([pred_encoded])[0]
    return category

def predict_future_expense(expenses):
    if not expenses:
        return 0.0
    categories = [e.category for e in expenses]
    try:
        most_common_cat = max(set(categories), key=categories.count)
    except ValueError:
        most_common_cat = 'Others'
    cat_encoded = label_encoder.transform([most_common_cat])[0]
    X_pred = np.array([[cat_encoded]])
    prediction = random_forest_model.predict(X_pred)
    return round(prediction[0], 2)

def predict_future_expense_by_category(expenses):
    category_expenses = defaultdict(list)
    for e in expenses:
        category_expenses[e.category].append(e)
    predictions = {}
    for cat, exp_list in category_expenses.items():
        cat_encoded = label_encoder.transform([cat])[0]
        X_pred = np.array([[cat_encoded]])
        prediction = random_forest_model.predict(X_pred)
        predictions[cat] = round(prediction[0], 2)
    return predictions

def aggregate_expenses_by_month(expenses):
    monthly_cat_expenses = defaultdict(list)
    for e in expenses:
        # Handle both string and datetime formats
        if isinstance(e.date, str):
            try:
                parsed_date = datetime.strptime(e.date, '%Y-%m-%d')
            except ValueError:
                parsed_date = datetime.strptime(e.date, '%Y-%m-%d %H:%M:%S')
        else:
            parsed_date = e.date

        year_month = parsed_date.strftime('%Y-%m')
        monthly_cat_expenses[(year_month, e.category)].append(e)

    monthly_cat_sums = {}
    for (ym, cat), exp_list in monthly_cat_expenses.items():
        total_amount = sum(e.amount for e in exp_list)
        monthly_cat_sums[(ym, cat)] = total_amount

    df = pd.DataFrame([
        {'year_month': ym, 'category': cat, 'total': total}
        for (ym, cat), total in monthly_cat_sums.items()
    ])
    return df

